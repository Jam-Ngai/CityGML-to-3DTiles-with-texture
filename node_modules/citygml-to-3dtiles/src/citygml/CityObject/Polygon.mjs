import LinearRing from 'citygml-to-3dtiles/src/geometry/LinearRing.mjs'
import TriangleMesh from 'citygml-to-3dtiles/src/geometry/TriangleMesh.mjs'
import CityObject from 'citygml-to-3dtiles/src/citygml/CityObject.mjs'
class Polygon extends CityObject {
  /**
   * @param {CityNode} cityNode
   */
  constructor (cityNode) {
    cityNode.assertLocalName('Polygon')
    super(cityNode)
  }
  /**
   * @returns {LinearRing[]}
   */
  getLinearRings () {
    if (!this.rings) {
      this.rings = this.cityNode.selectCityNodes('.//gml:LinearRing')//.//gml:Polygon//gml:LinearRing
        .map(ringNode => {
          let pos = ringNode.selectCityNodes('./gml:pos')
          let points = pos.map(n => n.getTextAsCoordinates1())
          if (points.length === 0) {
            points = ringNode.selectCityNode('./gml:posList').getTextAsCoordinates()
          }
          let polygonid = ringNode.xmlNode.attributes[0].nodeValue
          if (points.length < 4) {
            console.error(`WARNING: Ignoring "LinearRing" with less than 4 points at ${ringNode.getDocumentURI()} line ${ringNode.getLineNumber()}`)
            return null
          }
          return new LinearRing(points,polygonid)
        })
        .filter(ring => !!ring)
    }
    return this.rings
  }
  /**
   * @returns {TriangleMesh}
   */
  getTriangleMesh () {
    if (!this.triangleMesh) {
      let linearRings = this.getLinearRings()
      let triangles = linearRings.reduce((accumulator, ring) => {
        return accumulator.concat(ring.convertToTriangles())
      }, [])
      this.triangleMesh = new TriangleMesh(triangles,linearRings[0].polygonid)
    }
    return this.triangleMesh
  }
}
export default Polygon
